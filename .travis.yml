sudo: required
dist: trusty
language: cpp

matrix:
  include:
    - os: linux
      compiler: gcc

before_install:
  - sudo apt-get update && sudo apt-get install build-essential software-properties-common -y && sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
  - sudo apt-get update
  - sudo apt-get install gcc-snapshot -y
  - sudo apt-get install gcc-6 g++-6 -y 
  - sudo apt-get install cppcheck
  - sudo apt-get install valgrind
  - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6

install:
  - echo `which $CC`
  - echo `which $CXX`
  - curl https://cmake.org/files/v3.6/cmake-3.6.1-Linux-x86_64.tar.gz | sudo tar -x -z --strip-components 1 -C /usr

script:
  - echo `which $CXX`
  - mkdir build && cd build;
    cmake -DCMAKE_CXX_COMPILER=$CXX ..
  - make example_examplelibrary_tests

  - make lab9_base_serializer_tests
  - make lab9_json_serializer_tests
  - make lab9_xml_serializer_tests

  - cd .. && echo 'RUNNING ALL COMPILED TESTS'
  - find build/tests/ -type f -name '*tests' -exec {} \;
  - echo 'RUNNING CPPCHECK STATIC ANALYSIS'
  - find -L example lab* -mindepth 1 -maxdepth 1 -type d | xargs cppcheck --check-config --xml --xml-version=2 --suppress=missingIncludeSystem --enable=warning,performance,information,style,portability 2> build/cppcheck-report.xml && cat build/cppcheck-report.xml
  - echo 'RUNNING VALGRIND MEMCHECK (it can take a while)'
  - find build/tests/ -type f -name '*tests' ! -regex '.*\(xor_cypher_breaker\|double_base_palindrome\)_tests' -exec valgrind --leak-check=full --show-mismatched-frees=yes --track-origins=yes {} \;


notifications:
  email: false
